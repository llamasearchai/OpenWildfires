[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openfire-drone-ai"
version = "1.0.0"
description = "OpenFire: Advanced AI-Powered Drone Wildfire Detection and Monitoring Platform"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"}
]
maintainers = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"}
]
keywords = ["wildfire", "detection", "drones", "ai", "computer-vision", "openai", "pytorch"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core AI/ML
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "ultralytics>=8.0.200",
    "transformers>=4.35.0",
    "opencv-python>=4.8.1",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pillow>=10.0.0",
    
    # OpenAI Integration
    "openai>=1.3.0",
    "tiktoken>=0.5.0",
    
    # Drone Communication & Control
    "pymavlink>=2.4.37",
    "dronekit>=2.9.2",
    "mavsdk>=1.4.15",
    
    # Web Framework & API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Geospatial & Mapping
    "rasterio>=1.3.9",
    "geopandas>=0.14.0",
    "shapely>=2.0.0",
    "pyproj>=3.6.0",
    "folium>=0.15.0",
    
    # Computer Vision & Image Processing
    "albumentations>=1.3.1",
    "imageio>=2.31.0",
    "scikit-image>=0.21.0",
    
    # Data Processing & Storage
    "pandas>=2.1.0",
    "polars>=0.19.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    
    # MLOps & Monitoring
    "mlflow>=2.7.0",
    "wandb>=0.16.0",
    "dvc[all]>=3.25.0",
    
    # Logging & Observability
    "structlog>=23.2.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "prometheus-client>=0.18.0",
    
    # Communication & Alerts
    "websockets>=12.0",
    "aioredis>=2.0.0",
    "httpx>=0.25.0",
    "twilio>=8.10.0",
    "sendgrid>=6.10.0",
    
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "rich>=13.6.0",
    
    # Security & Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Async & Concurrency
    "asyncio>=3.4.3",
    "aiofiles>=23.2.1",
    "aioboto3>=12.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "ipykernel>=6.25.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

gpu = [
    "torch[cuda]>=2.1.0",
    "torchvision[cuda]>=0.16.0",
    "cupy-cuda12x>=12.2.0",
    "nvidia-ml-py>=12.535.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/nikjois/openfire-drone-ai"
Documentation = "https://openfire-drone-ai.readthedocs.io"
Repository = "https://github.com/nikjois/openfire-drone-ai"
"Bug Tracker" = "https://github.com/nikjois/openfire-drone-ai/issues"

[project.scripts]
openfire = "openfire.cli:main"
openfire-api = "openfire.api.main:run_server"
openfire-drone = "openfire.drone.controller:main"
openfire-detect = "openfire.detection.inference:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["openfire*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PL", # pylint
    "PT", # flake8-pytest-style
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["openfire"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 